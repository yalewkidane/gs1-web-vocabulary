{"version":3,"file":"Literal.js","sourceRoot":"","sources":["Literal.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AAExC;;;;GAIG;AACH,MAAa,OAAO;IAgBlB,YAAmB,KAAa,EAAE,kBAAqE;QAfvF,aAAQ,GAAG,SAAS,CAAC;QAgBnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,mBAAmB,CAAC;YAC5C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,CAAC;aAAM,IAAI,kBAAkB,EAAE,CAAC;YAC9B,IAAI,UAAU,IAAI,kBAAkB,EAAE,CAAC;gBACrC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACnB,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;gBACnC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACtB,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;gBAC5C,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBAC5C,OAAO,CAAC,+BAA+B,CAAC,CAAC;oBACzC,OAAO,CAAC,mBAAmB,CAAC;gBAC9B,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,IAAI,EAAE,CAAC;YACtD,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,KAAuB;QACnC,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK;YAC1E,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ;YAChC,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC;YACrF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;;AA9CH,0BA+CC;AAxCwB,2BAAmB,GAC1C,IAAI,qBAAS,CAAC,uDAAuD,CAAC,AAD5B,CAC6B;AAEhD,uCAA+B,GACtD,IAAI,qBAAS,CAAC,0DAA0D,CAAC,AADnB,CACoB;AAEnD,kBAAU,GACjC,IAAI,qBAAS,CAAC,yCAAyC,CAAC,AADvB,CACwB","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { NamedNode } from './NamedNode';\n\n/**\n * A term that represents an RDF literal,\n * containing a string with an optional language tag and optional direction\n * or datatype.\n */\nexport class Literal implements RDF.Literal {\n  public readonly termType = 'Literal';\n  public readonly value: string;\n  public readonly language: string;\n  public readonly datatype: RDF.NamedNode;\n  public readonly direction: 'ltr' | 'rtl' | '';\n\n  public static readonly RDF_LANGUAGE_STRING: RDF.NamedNode =\n  new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\n\n  public static readonly RDF_DIRECTIONAL_LANGUAGE_STRING: RDF.NamedNode =\n  new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString');\n\n  public static readonly XSD_STRING: RDF.NamedNode =\n  new NamedNode('http://www.w3.org/2001/XMLSchema#string');\n\n  public constructor(value: string, languageOrDatatype?: string | RDF.NamedNode | RDF.DirectionalLanguage) {\n    this.value = value;\n    if (typeof languageOrDatatype === 'string') {\n      this.language = languageOrDatatype;\n      this.datatype = Literal.RDF_LANGUAGE_STRING;\n      this.direction = '';\n    } else if (languageOrDatatype) {\n      if ('termType' in languageOrDatatype) {\n        this.language = '';\n        this.datatype = languageOrDatatype;\n        this.direction = '';\n      } else {\n        this.language = languageOrDatatype.language;\n        this.datatype = languageOrDatatype.direction ?\n          Literal.RDF_DIRECTIONAL_LANGUAGE_STRING :\n          Literal.RDF_LANGUAGE_STRING;\n        this.direction = languageOrDatatype.direction || '';\n      }\n    } else {\n      this.language = '';\n      this.datatype = Literal.XSD_STRING;\n      this.direction = '';\n    }\n  }\n\n  public equals(other?: RDF.Term | null): boolean {\n    return !!other && other.termType === 'Literal' && other.value === this.value &&\n      other.language === this.language &&\n      ((other.direction === this.direction) || (!other.direction && this.direction === '')) &&\n      this.datatype.equals(other.datatype);\n  }\n}\n"]}